(define (domain baking)
    (:requirements :typing )
    (:types ingredient pan oven soap)
    (:predicates
        (IsEgg ?egg - ingredient)
        (IsFlour ?flour - ingredient)
        (PanHasEgg ?pan - pan)
        (PanHasFlour ?pan - pan)
        (PanIsClean ?pan - pan)
        (PanInOven ?pan - pan)
        (InPan ?x - ingredient ?pan - pan)
        (InOven ?pan - pan ?oven - oven)
        (OvenIsFull ?oven - oven)
        (Hypothetical ?new - ingredient)
        (IsMixed ?pan - pan)
        (IsCake ?new - ingredient)
        (IsSouffle ?new - ingredient)
        (SoapConsumed ?soap - soap)
        (PutEggInPan ?egg - ingredient ?pan - pan)
        (PutFlourInPan ?flour - ingredient ?pan - pan)
        (Mix ?pan - pan)
        (PutPanInOven ?pan - pan ?oven - oven)
        (RemovePanFromOven ?pan - pan)
        (BakeCake ?new - ingredient ?oven - oven)
        (BakeSouffle ?new - ingredient ?oven - oven)
        (CleanPan ?pan - pan ?soap - soap)
    )

    ; (:actions PutEggInPan PutFlourInPan Mix PutPanInOven RemovePanFromOven BakeCake BakeSouffle CleanPan)

    (:action PutEggInPan
    :parameters (?egg - ingredient ?pan - pan)
    :precondition (and (PutEggInPan ?egg ?pan)
                       (IsEgg ?egg)
                       (not (PanHasEgg ?pan))
                       (not (IsMixed ?pan))
                       (PanIsClean ?pan)
                       (not (PanInOven ?pan))
                  )
    :effect (and (PanHasEgg ?pan)
                 (InPan ?egg ?pan)
            )
    )

    (:action PutFlourInPan
    :parameters (?flour - ingredient ?pan - pan)
    :precondition (and (PutFlourInPan ?flour ?pan)
                       (IsFlour ?flour)
                       (not (PanHasFlour ?pan))
                       (not (IsMixed ?pan))
                       (PanIsClean ?pan)
                       (not (PanInOven ?pan))
                  )
    :effect (and (PanHasFlour ?pan)
                 (InPan ?flour ?pan)
            )
    )

    (:action Mix
    :parameters (?egg - ingredient ?flour - ingredient ?pan - pan)
    :precondition (and (Mix ?pan)
                       (InPan ?egg ?pan)
                       (InPan ?flour ?pan)
                       (IsEgg ?egg)
                       (IsFlour ?flour)
                       (not (PanInOven ?pan))
                  )
    :effect (and (IsMixed ?pan)
                 (not (IsEgg ?egg))
                 (not (IsFlour ?flour))
                 (not (InPan ?egg ?pan))
                 (not (InPan ?flour ?pan))
                 (not (PanHasEgg ?pan))
                 (not (PanHasFlour ?pan))
            )
    )

    (:action PutPanInOven
    :parameters (?pan - pan ?oven - oven)
    :precondition (and (PutPanInOven ?pan ?oven)
                       (not (OvenIsFull ?oven))
                       (not (PanInOven ?pan))
                  )
    :effect (and (OvenIsFull ?oven)
                 (InOven ?pan ?oven)
                 (PanInOven ?pan)
            )
    )

    (:action RemovePanFromOven
    :parameters (?pan - pan ?oven - oven)
    :precondition (and (RemovePanFromOven ?pan)
                       (InOven ?pan ?oven)
                  )
    :effect (and (not (OvenIsFull ?oven))
                 (not (InOven ?pan ?oven))
                 (not (PanInOven ?pan))
            )
    )

    (:action BakeCake
    :parameters (?oven - oven ?pan - pan ?new - ingredient)
    :precondition (and (BakeCake ?new ?oven)
                       (IsMixed ?pan)
                       (InOven ?pan ?oven)
                       (Hypothetical ?new)
                  )
    :effect (and (not (IsMixed ?pan))
                 (not (PanIsClean ?pan))
                 (not (Hypothetical ?new))
                 (IsCake ?new)
            )
    )

    (:action BakeSouffle
    :parameters (?oven - oven ?egg - ingredient ?pan - pan ?new - ingredient)
    :precondition (and (BakeSouffle ?new ?oven)
                       (InPan ?egg ?pan)
                       (IsEgg ?egg)
                       (not (PanHasFlour ?pan))
                       (InOven ?pan ?oven)
                       (Hypothetical ?new)
                  )
    :effect (and (not (IsEgg ?egg))
                 (not (InPan ?egg ?pan))
                 (not (PanHasEgg ?pan))
                 (not (PanIsClean ?pan))
                 (not (Hypothetical ?new))
                 (IsSouffle ?new)
            )
    )

    (:action CleanPan
    :parameters (?pan - pan ?soap - soap)
    :precondition (and (CleanPan ?pan ?soap)
                       (not (SoapConsumed ?soap))
                       (not (PanInOven ?pan))
                  )
    :effect (and (PanIsClean ?pan)
                 (SoapConsumed ?soap)
            )
    )

)
        